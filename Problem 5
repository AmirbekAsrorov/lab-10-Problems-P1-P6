#include <iostream>
#include <queue>
using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};
TreeNode* insertBST(TreeNode* root, int val) {
    if (!root) return new TreeNode(val);
    if (val < root->val) root->left = insertBST(root->left, val);
    else root->right = insertBST(root->right, val);
    return root;
}
int rangeSumBST(TreeNode* root, int low, int high) {
    if (!root) return 0;
    if (root->val < low) return rangeSumBST(root->right, low, high);
    if (root->val > high) return rangeSumBST(root->left, low, high);
    return root->val + rangeSumBST(root->left, low, high) + rangeSumBST(root->right, low, high);
}
void printLevelOrder(TreeNode* root) {
    if (!root) {
        cout << "null\n";
        return;
    }
    queue<TreeNode*> q;
    q.push(root);
    while (!q.empty()) {
        TreeNode* node = q.front(); q.pop();
        if (node) {
            cout << node->val << " ";
            q.push(node->left);
            q.push(node->right);
        } else {
            cout << "null ";
        }
    }
    cout << "\n";
}
int main() {
    TreeNode* root = nullptr;
    int n;
    cout << "Enter number of nodes in BST: ";
    cin >> n;
    cout << "Enter BST node values (space separated): ";
    for (int i = 0; i < n; ++i) {
        int val;
        cin >> val;
        root = insertBST(root, val);
    }
    int low, high;
    cout << "Enter range low and high: ";
    cin >> low >> high;
    int sum = rangeSumBST(root, low, high);
    cout << "Range sum of BST nodes in [" << low << ", " << high << "] is: " << sum << "\n";
    cout << "BST level-order: ";
    printLevelOrder(root);

    return 0;
}
