#include <iostream>
#include <list>
using namespace std;

class ListPriorityQueue {
public:
    int size() const;
    bool empty() const;
    void insert(int e);
    int min() const;
    void removeMin();

private:
    list<int> L;
    static bool isLess(int a, int b) { return a < b; }
};
int ListPriorityQueue::size() const {
    return L.size();
}


bool ListPriorityQueue::empty() const {
    return L.empty();
}

void ListPriorityQueue::insert(int e) {
    auto it = L.begin();
    while (it != L.end() && !isLess(e, *it)) {
        ++it;
    }
    L.insert(it, e); 
}


int ListPriorityQueue::min() const {
    if (empty()) {
        cout << "empty queue" << endl;
        throw runtime_error("empty queue");
    }
    return L.front();
}

void ListPriorityQueue::removeMin() {
    if (empty()) {
        cout << "empty queue" << endl;
        return;
    }
    L.pop_front();
}

int main() {
    ListPriorityQueue pq;
    pq.insert(5);
    pq.insert(2);
    pq.insert(7);
    pq.insert(3);

    while (!pq.empty()) {
        cout << pq.min() << " ";
        pq.removeMin();
    }
    cout << "\n";

    return 0;
}
